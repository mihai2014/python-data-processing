names = {
'introduction.ipynb':'Introduction',
'central_limit_theorem.ipynb':'Central limit theorem',
'linear_regression.ipynb':'Linear regression',
'var-covar-std-corr.html':'Variance, covariance, standard deviation, correlation',
'linear_proof.ipynb':'Correlation coefficient',
'linear_gradient.ipynb':'Linear regression with gradient descent',
'logistic1.ipynb':'Binary classification',
'logistic2.ipynb':'Logistic regression',
'logistic3.ipynb':'Logistic regression(II)',
'circle.ipynb':'Circle boundary classification',
'backprop1.ipynb':'Back propagation',
'net1.ipynb':'Neural network example 1',
'net2.ipynb':'Neural network example 2',
'pytorch1.ipynb':'Logistic regression(custom functions)(pytorch)',
'pytorch2.ipynb':'Linear regression(pytorch)',
'pytorch3.ipynb':'Non-linear boundary(1 layer NN PyTorch)',
'pytorch4.ipynb':'Non-linear boundary(2 layer NN PyTorch',
'pytorch6.ipynb':'Logistic regression - 3 classes',
'pytorch7.ipynb':'MNIST - training fully-connected NN (I)',
'pytorch8.ipynb':'MNIST (II)',
'pytorch8_1.ipynb':'MNIST - Accuracy (training vs test data sets)',
'pytorch8_2.ipynb':'MNIST - save/load NN state',
'cross-entropy-loss.ipynb':'Cross Entropy Loss - relation with NLLLoss and LogSoftmax',
'tangent1.ipynb':'Drawing tangents',
'pandas_sql1.ipynb':'Queries1',
'pandas_sql2.ipynb':'Queries2',
}        
